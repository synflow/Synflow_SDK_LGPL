/*
 * This file is part of the ngDesign SDK.
 *
 * Copyright (c) 2019 Synflow SAS.
 *
 * ngDesign is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ngDesign is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ngDesign.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
module com.synflow.cx.GenerateCx

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var fileExtensions = "cx"
var projectName = "com.synflow.cx"
var projectPath = "../${projectName}"//var rootPath = "overridden"
// grammarURI has to be platform:/resource as it is not on the classpath
var grammarURI = "platform:/resource/${projectName}/src/com/synflow/cx/Cx.xtext"
var lineDelimiter = "\n"
var encoding = "UTF-8"

Workflow {

	bean = StandaloneSetup {
	// register current projects and its siblings for platform URI map, as they are not on the classpath.
		platformUri = "${projectPath}/.."
		registerEcoreFile = "platform:/resource/${projectName}/model/Cx.ecore"
	}

	component = DirectoryCleaner {
		directory = "${projectPath}/emf-gen"
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/Cx.genmodel"
		srcPath = "platform:/resource/${projectName}/emf-gen"
		lineDelimiter = lineDelimiter
	}

	component = DirectoryCleaner {
		directory = "${projectPath}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${projectPath}.ui/src-gen"
	}

	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = projectName
				rootPath = "${projectPath}/.."
				runtimeTest = {
					enabled = true
				}
				genericIde = {
					name = "${projectName}.ui"
				}
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				preferXtendStubs = false
				encoding = encoding
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}

		language = XtextGeneratorLanguage {
		//name = grammarURI
			grammarUri = grammarURI
			fileExtensions = fileExtensions
			//referencedResource = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
			
			// Java API to access grammar elements (required by several other fragments)		
			fragment = grammarAccess.GrammarAccessFragment2 {}
			fragment = ecore.EMFGeneratorFragment2 {} //*
			
			// the serialization component
			fragment = serializer.SerializerFragment2 {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment2 {}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
				options = {
					classSplitting = true
				}
			}

			// generates a more lightweight Antlr parser and lexer tailored for content assist
			// fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment {}

			// java-based API for validation
			fragment = validation.ValidatorFragment2 {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				composedCheck = "com.synflow.cx.internal.validation.ExpressionValidator"
				composedCheck = "com.synflow.cx.internal.validation.StructuralValidator"
				composedCheck = "com.synflow.cx.internal.validation.WarningValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 {}
			fragment = exporting.QualifiedNamesFragment2 {}
			fragment = builder.BuilderIntegrationFragment2 {}

			// generator API
			fragment = generator.GeneratorFragment2 {
				generateStub = false
				generateMwe = false
				generateJavaMain = false				
			}
			
			// formatter API
			fragment = formatting.Formatter2Fragment2 {
				generateStub = true
			}

			// labeling API
			fragment = ui.labeling.LabelProviderFragment2 {}
			
			// outline API
			fragment = ui.outline.QuickOutlineFragment2 {}
			fragment = ui.outline.OutlineTreeProviderFragment2 {}

			// quickfix API
			fragment = ui.quickfix.QuickfixProviderFragment2 {}

			// content assist API
			fragment = ui.contentAssist.ContentAssistFragment2 {}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.JUnitFragment {}

			// project wizard (optional)
			fragment = ui.projectWizard.TemplateProjectWizardFragment {
			     //generatorProjectName = "${projectName}"
			     //modelFileExtension = file.extensions
			}
			
			// rename refactoring
			fragment = ui.refactoring.RefactorElementNameFragment2 {}
			
			// provides the necessary bindings for java types integration			
			fragment = types.TypesGeneratorFragment2 {}
			
			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XtypeGeneratorFragment2 {}
			fragment = xbase.XbaseGeneratorFragment2 {}
			
			fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
			
			// provides a compare view
			fragment = ui.compare.CompareFragment2 {}

			fragment = ui.fileWizard.TemplateFileWizardFragment {}
		}
	}
}
